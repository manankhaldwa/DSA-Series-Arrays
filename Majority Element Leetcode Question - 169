Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Solution 1 : Brute force approach = O(n^2)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        // Brute force approach 
        int n = nums.size();
        for(int val : nums){
            int freq = 0;
            for(int el : nums){
                if(el == val){
                    freq++;
                }
            }
            if(freq > n/2) return val;
        }
        return -1;
    }
};

Solution 2 : Using Sorting ( In-built function ) = O(nlogn)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n = nums.size();
        // sort
        sort(nums.begin(), nums.end());

        // freq count 
        int freq = 1, ans = nums[0];
        for(int i = 1; i < n; i++){
            if(nums[i] == nums[i-1]) freq++;
            else freq = 1, ans=nums[i];

           if(freq > n/2)return ans;
        }
        return ans;
    }
};

Solution 3 : Moore's Voting Algorithm = O(n)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int freq=0, ans=0;

        for(int i=0; i<nums.size(); i++){
            if(freq==0) ans = nums[i];
            if(ans == nums[i]) freq++;
            else freq--;
        }
        return ans;
    }
};
